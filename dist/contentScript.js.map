{"version":3,"file":"contentScript.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension/./src/contentScript/clickEvent.ts","webpack://chrome-extension/./src/contentScript/scrollEvent.ts","webpack://chrome-extension/./src/contentScript/utils.ts","webpack://chrome-extension/webpack/bootstrap","webpack://chrome-extension/webpack/runtime/define property getters","webpack://chrome-extension/webpack/runtime/hasOwnProperty shorthand","webpack://chrome-extension/webpack/runtime/make namespace object","webpack://chrome-extension/./src/contentScript/contentScript.ts"],"sourcesContent":["import { HTML_ELEMENTS, addStep } from './utils';\n\nexport const logFunctionForClick = (event) => {\n    if(event.target.tagName === HTML_ELEMENTS.BUTTON){\n      console.log('Click ', event.target.innerText);\n      addStep(`Click ${event.target.innerText}.`);\n    } else if(event.target.tagName === HTML_ELEMENTS.LINK){\n      console.log('Click Link!!');\n      addStep(`Click Link.`);\n\n    }\n  }","import { addStep } from \"./utils\";\n\nlet isScrolling;\nlet lastScrollPosition = window.scrollY;\n\nexport function checkScrollDirection() {\n    // Clear the timeout to prevent multiple executions\n    clearTimeout(isScrolling);\n\n    // Set a timeout to execute the function after scrolling stops\n    isScrolling = setTimeout(function() {\n        const currentScrollPosition = window.scrollY;\n\n        if (currentScrollPosition > lastScrollPosition) {\n            // Scrolled down\n            console.log('Scroll down');\n            addStep(`Scroll down.`);\n        } else if (currentScrollPosition < lastScrollPosition) {\n            // Scrolled up\n            console.log('Scroll up');\n            addStep(`Scroll up.`);\n        }\n\n        // Update last scroll position\n        lastScrollPosition = currentScrollPosition;\n    }, 200); // Adjust the delay as needed\n}","export const HTML_ELEMENTS = {\n  BUTTON: 'BUTTON',\n  LINK: 'A',\n  IMAGE: 'IMG'\n}\n\nexport function isMobile() {\n  const regex =\n    /Mobi|Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i;\n  if (regex.test(navigator.userAgent)) {\n    return \"Mobile\";\n  } else {\n    return \"Desktop\";\n  }\n}\n\nlet STEP_COUNT = 0;\nexport const RECORDING_OBJECT = {\n  url: '',\n  userAgent: '',\n  screenSize: '',\n  steps: []\n}\n\nfunction pushIfDifferent(arr, element) {\n  // Check if the array is empty or the last element is different from the new element\n  if (arr.length === 0 || arr[arr.length - 1] !== element) {\n    // arr.push(`${++STEP_COUNT}. ${element}.`);\n    arr.push(`${element}`);\n  }\n}\n\n\nexport const addStep = (stepDetail) => {\n  pushIfDifferent(RECORDING_OBJECT.steps, stepDetail);\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { logFunctionForClick } from './clickEvent';\nimport { checkScrollDirection } from './scrollEvent'; \nimport { RECORDING_OBJECT, addStep, isMobile } from './utils';\n\nlet CONSOLE_STYLE = 'color: white; background: black; font-size: 15px;';\n\nconst startRecording = () => {\n    RECORDING_OBJECT.url = window.location.href;\n    RECORDING_OBJECT.userAgent = isMobile();\n    RECORDING_OBJECT.screenSize = `${window.innerWidth} x ${window.innerHeight}`;\n    RECORDING_OBJECT.steps = [];\n    addStep(`Go to url ${window.location.href}`)\n    // console.log(`%cURL : ${window.location.href} `, CONSOLE_STYLE)\n    // console.log(`%cUser Agent : ${isMobile()}`, CONSOLE_STYLE);\n    // console.log(`%cScreen size : ${window.innerWidth} x ${window.innerHeight}`, CONSOLE_STYLE)\n    clickEventsCapture();\n    scrollEventCapture();\n}\n\nconst clickEventsCapture = () => {\n  document.body.addEventListener('click', logFunctionForClick);\n}\n\nconst scrollEventCapture = () => {\n  window.addEventListener('scroll', checkScrollDirection);\n}\n\nconst stopRecording = () => {\n  clearAllEvents();\n}\n\nconst clearAllEvents = () => {\n  // console.log('clear all')\n  document.body.removeEventListener('click', logFunctionForClick);\n  window.removeEventListener('scroll', checkScrollDirection);\n}\n\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n    console.log('reached listener');\n    if (request.action === 'startRecording') {\n        console.log(\"inside startRecording\");\n        startRecording();\n        chrome.storage.local.set({ status: {} }).then(() => {\n          console.log(\"Value is set to empty\");\n          sendResponse(`---RECORDING STARTED---`);\n        });\n      }\n      if (request.action === 'stopRecording') {\n        stopRecording();\n        chrome.storage.local.set({ status: RECORDING_OBJECT }).then(() => {\n          console.log(\"Value is set to RECORDING_OBJECT\");\n          sendResponse(`---RECORDING STOPPED---`);\n        });\n      }\n    }\n  );\n\n"],"names":[],"sourceRoot":""}